# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13uE8JPuYwllEILheWQbNPrKTctEH-GPd
"""

import requests
from requests import Request
from requests.exceptions import ConnectionError, Timeout, TooManyRedirects
import json
import pandas as pd
import matplotlib.pyplot as plt

url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'
parameters = {
  'start':'1',
  'limit':'5000',
  'convert':'USD'
}
headers = {
  'Accepts': 'application/json',
  'X-CMC_PRO_API_KEY': '24ffa2a5-b3e5-4732-9163-7caa86e7f921',
}

session = requests.Session()
session.headers.update(headers)

try:
    response = session.get(url, params=parameters)
    data = json.loads(response.text)
except(ConnectionError, Timeout, TooManyRedirects) as e:
    print(e)

crypto_lst = []
for crypto in data['data']:
    crypto_lst.append(crypto['symbol'])
crypto_price = []
for crypto in data['data']:
    crypto_price.append(crypto['quote']['USD']['price'])
df = pd.DataFrame(index=crypto_lst, data = crypto_price, columns = ['USD_Ticker']) 
btc = data['data'][0]['quote']['USD']['price']
btc_lst = []
for price in df['USD_Ticker']:
    btc_lst.append(price/btc)
df['BTC_Ticker'] = btc_lst

coins = ['BTC','ETH','XRP','LTC',
         'EOS','ADA','WAVES',
         'BAT','LINK', 'NEO',
         'VET','IOST','KCS',
         'XTZ','MAID','ENG',
         'NRG','SNT','ATOM',
         'ZEC','XMR','GRIN','BCH']

df2 = df[:].loc[coins]

ROI = []
i = 0
btc =  df2.loc['BTC'].values[0]
Purchased_For = [7881.27, .01759297, .0000307, .006446, .0003759, .00000536, .00010109, .00003217, .000272676, .00119153, .00000076, .00000076, .00013139, .00019868, .00001960, .00006331, .00028602, .00000145, .000514159, .00403226, .0073948, .00011744,.03011]

Fiancial_Sector = ['BTC','XRP','LTC']
Fiancial_Sector_Purchased_For = [7885.4, .0000307, .006446]
Privacy_Sector = ['ENG','ZEC','XMR','GRIN']
Privacy_Sector_Purchased_For = [.00006331, .00403226, .0073948, .00011744]
Exchange_Sector = ['KCS','WAVES'] 
Exchange_Sector_Purchased_For = [.00013139, .0000948238]
Dapps_Sector = ['ETH','EOS','ADA','LINK','NEO','VET','IOST','XTZ','MAID','ENG','NRG','SNT','ATOM']
Dapps_Sector_Purchased_For = [.01759297, .0003759, .00000536,  ]

Coin_Amount = [.02735972, 2.05, 80, .33, 15, 74.4, 48, 53, 99.59, 3, 2331.6, 2133.9, 27.4, 9.1, 67, 102.7, 4.34, 15.68, 13.02, 1.225, .672,19.5,.067000]
for ticker in df2.BTC_Ticker:
    if ticker == 1:
        ROI.append("{:.2f}".format(((float(btc)/Purchased_For[i])-1)))
        i += 1
    else:
        ROI.append("{:.2f}".format(((float(ticker)/Purchased_For[i])-1)))
        i += 1
ROI_float = []
for x in ROI:
    ROI_float.append(float(x))
df2['Purchased_For'] = Purchased_For
df2['ROI'] = ROI_float
df2['Coin_Amount'] = Coin_Amount

USD_Amount = []
i = 0
for x in df2.Coin_Amount:
    USD_Amount.append(x*float(df2.USD_Ticker[i]))
    i += 1
df2['USD_Amount'] = USD_Amount

print(df2)

explode = (1.5,.8,.9,0.6,0.55,0.4,0.3,0.2,0.15,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0)
df_pie = pd.DataFrame(data=df2.USD_Amount.values,index=list(df2.index), columns=['USD_Distribution'])
df_pie.sort_values(by = 'USD_Distribution', ascending= True, inplace= True)
plt.figure()
plt.subplot(1,2,1)
df_pie.USD_Distribution.plot(kind = 'pie',autopct='%1.1f%%',startangle=270,explode=explode)
plt.title('Portfolio_Pie')
plt.subplots_adjust(right=2,top=2)
plt.subplot(1,2,2)
df_pie.USD_Distribution.plot(kind = 'bar')
plt.title('Portfolio_Bar')#

Fiancial_Sector_df = df2.loc[Fiancial_Sector][:]
Privacy_Sector_df = df2.loc[Privacy_Sector][:]
Exchange_Sector_df = df2.loc[Exchange_Sector][:]
Dapps_Sector_df = df2.loc[Dapps_Sector][:]



def Weighted_Avg(first_amount, second_amount, first_val, second_val):
    first_weight = first_amount / (first_amount + second_amount)
    second_weight = second_amount / (first_amount + second_amount)
    return first_weight * first_val + second_val * second_weight

# XMR
print('XMR: ', Weighted_Avg(.4, .272, .0074314, .007341))

# ATOM
print('ATOM: ', Weighted_Avg(9.31, 3.71, .00050432, .00053885))

# ZEC
print('ZEC: ', Weighted_Avg(.75, .475, .00392889, .0041955))

# WAVES
print('WAVES: ', Weighted_Avg(20, 28, .0000948238, .00010558))





